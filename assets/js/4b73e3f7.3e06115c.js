"use strict";(self.webpackChunklinkis_web_apache=self.webpackChunklinkis_web_apache||[]).push([[6038],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,p=d["".concat(c,".").concat(m)]||d[m]||g[m]||i;return t?a.createElement(p,o(o({ref:n},s),{},{components:t})):a.createElement(p,o({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},16743:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),o=["components"],l={title:"EngineConn Design",sidebar_position:1},c="EngineConn architecture design",u={unversionedId:"architecture/computation-governance-services/engine/engine-conn",id:"architecture/computation-governance-services/engine/engine-conn",isDocsHomePage:!1,title:"EngineConn Design",description:"EngineConn: Engine connector, a module that provides functions such as unified configuration management, context service, physical library, data source management, microservice management, and historical task query for other microservice modules.",source:"@site/docs/architecture/computation-governance-services/engine/engine-conn.md",sourceDirName:"architecture/computation-governance-services/engine",slug:"/architecture/computation-governance-services/engine/engine-conn",permalink:"/docs/1.3.0/architecture/computation-governance-services/engine/engine-conn",editUrl:"https://github.com/apache/incubator-linkis-website/edit/dev/docs/architecture/computation-governance-services/engine/engine-conn.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"EngineConn Design",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"EC History List Architecture Design",permalink:"/docs/1.3.0/architecture/computation-governance-services/linkis-manager/ec-history-arc"},next:{title:"EngineConnManager Design",permalink:"/docs/1.3.0/architecture/computation-governance-services/engine/engine-conn-manager"}},s=[{value:"linkis-computation-engineconn interactive engine connector",id:"linkis-computation-engineconn-interactive-engine-connector",children:[]},{value:"linkis-engineconn-common engine connector common module",id:"linkis-engineconn-common-engine-connector-common-module",children:[]},{value:"The core logic of linkis-engineconn-core engine connector",id:"the-core-logic-of-linkis-engineconn-core-engine-connector",children:[]},{value:"linkis-engineconn-launch engine connector startup module",id:"linkis-engineconn-launch-engine-connector-startup-module",children:[]},{value:"The core logic of the linkis-executor-core executor",id:"the-core-logic-of-the-linkis-executor-core-executor",children:[]},{value:"linkis-callback-service callback logic",id:"linkis-callback-service-callback-logic",children:[]},{value:"linkis-accessible-executor can be accessed executor",id:"linkis-accessible-executor-can-be-accessed-executor",children:[]}],g={toc:s};function d(e){var n=e.components,l=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},g,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"engineconn-architecture-design"},"EngineConn architecture design"),(0,i.kt)("p",null,"EngineConn: Engine connector, a module that provides functions such as unified configuration management, context service, physical library, data source management, microservice management, and historical task query for other microservice modules."),(0,i.kt)("p",null,"EngineConn architecture diagram"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"EngineConn",src:t(35983).Z})),(0,i.kt)("h1",{id:"introduction-to-the-second-level-module"},"Introduction to the second-level module:"),(0,i.kt)("h2",{id:"linkis-computation-engineconn-interactive-engine-connector"},"linkis-computation-engineconn interactive engine connector"),(0,i.kt)("p",null,"The ability to provide interactive computing tasks."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Core class"),(0,i.kt)("th",{parentName:"tr",align:null},"Core function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnTask"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines the interactive computing tasks submitted to EngineConn")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ComputationExecutor"),(0,i.kt)("td",{parentName:"tr",align:null},"Defined interactive Executor, with interactive capabilities such as status query and task kill.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TaskExecutionService"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides management functions for interactive computing tasks")))),(0,i.kt)("h2",{id:"linkis-engineconn-common-engine-connector-common-module"},"linkis-engineconn-common engine connector common module"),(0,i.kt)("p",null,"Define the most basic entity classes and interfaces in the engine connector. EngineConn is used to create a connection session for the underlying computing storage engine, which contains the session information between the engine and the specific cluster, and is the client that communicates with the specific engine."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Core Service"),(0,i.kt)("th",{parentName:"tr",align:null},"Core function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineCreationContext"),(0,i.kt)("td",{parentName:"tr",align:null},"Contains the context information of EngineConn during startup")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConn"),(0,i.kt)("td",{parentName:"tr",align:null},"Contains the specific information of EngineConn, such as type, specific connection information with layer computing storage engine, etc.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineExecution"),(0,i.kt)("td",{parentName:"tr",align:null},"Provide Executor creation logic")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnHook"),(0,i.kt)("td",{parentName:"tr",align:null},"Define the operations before and after each phase of engine startup")))),(0,i.kt)("h2",{id:"the-core-logic-of-linkis-engineconn-core-engine-connector"},"The core logic of linkis-engineconn-core engine connector"),(0,i.kt)("p",null,"Defines the interfaces involved in the core logic of EngineConn."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Core class"),(0,i.kt)("th",{parentName:"tr",align:null},"Core function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnManager"),(0,i.kt)("td",{parentName:"tr",align:null},"Provide related interfaces for creating and obtaining EngineConn")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ExecutorManager"),(0,i.kt)("td",{parentName:"tr",align:null},"Provide related interfaces for creating and obtaining Executor")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ShutdownHook"),(0,i.kt)("td",{parentName:"tr",align:null},"Define the operation of the engine shutdown phase")))),(0,i.kt)("h2",{id:"linkis-engineconn-launch-engine-connector-startup-module"},"linkis-engineconn-launch engine connector startup module"),(0,i.kt)("p",null,"Defines the logic of how to start EngineConn."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Core class"),(0,i.kt)("th",{parentName:"tr",align:null},"core function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnServer"),(0,i.kt)("td",{parentName:"tr",align:null},"EngineConn microservice startup class")))),(0,i.kt)("h2",{id:"the-core-logic-of-the-linkis-executor-core-executor"},"The core logic of the linkis-executor-core executor"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"  Defines the core classes related to the actuator. The executor is a real computing scene executor, responsible for submitting user code to EngineConn.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Core class"),(0,i.kt)("th",{parentName:"tr",align:null},"Core function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Executor"),(0,i.kt)("td",{parentName:"tr",align:null},"It is the actual computational logic execution unit and provides a top-level abstraction of the various capabilities of the engine.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnAsyncEvent"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines EngineConn-related asynchronous events")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnSyncEvent"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines EngineConn-related synchronization events")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnAsyncListener"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines EngineConn related asynchronous event listener")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnSyncListener"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines EngineConn related synchronization event listener")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnAsyncListenerBus"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines the listener bus for EngineConn asynchronous events")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnSyncListenerBus"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines the listener bus for EngineConn synchronization events")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ExecutorListenerBusContext"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines the context of the EngineConn event listener")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"LabelService"),(0,i.kt)("td",{parentName:"tr",align:null},"Provide label reporting function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ManagerService"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides the function of information transfer with LinkisManager")))),(0,i.kt)("h2",{id:"linkis-callback-service-callback-logic"},"linkis-callback-service callback logic"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Core Class"),(0,i.kt)("th",{parentName:"tr",align:null},"Core Function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnCallback"),(0,i.kt)("td",{parentName:"tr",align:null},"Define EngineConn's callback logic")))),(0,i.kt)("h2",{id:"linkis-accessible-executor-can-be-accessed-executor"},"linkis-accessible-executor can be accessed executor"),(0,i.kt)("p",null,"Executor that can be accessed. You can interact with it through RPC requests to get its status, load, concurrency and other basic indicators Metrics data."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Core Class"),(0,i.kt)("th",{parentName:"tr",align:null},"Core Function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"LogCache"),(0,i.kt)("td",{parentName:"tr",align:null},"Provide log cache function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"AccessibleExecutor"),(0,i.kt)("td",{parentName:"tr",align:null},"The Executor that can be accessed can interact with it through RPC requests.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NodeHealthyInfoManager"),(0,i.kt)("td",{parentName:"tr",align:null},"Manage Executor's Health Information")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NodeHeartbeatMsgManager"),(0,i.kt)("td",{parentName:"tr",align:null},"Manage the heartbeat information of Executor")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NodeOverLoadInfoManager"),(0,i.kt)("td",{parentName:"tr",align:null},"Manage Executor load information")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Listener"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides events related to Executor and the corresponding listener definition")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EngineConnTimedLock"),(0,i.kt)("td",{parentName:"tr",align:null},"Define Executor level lock")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"AccessibleService"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides the start-stop and status acquisition functions of Executor")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ExecutorHeartbeatService"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides heartbeat related functions of Executor")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"LockService"),(0,i.kt)("td",{parentName:"tr",align:null},"Provide lock management function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"LogService"),(0,i.kt)("td",{parentName:"tr",align:null},"Provide log management functions")))))}d.isMDXComponent=!0},35983:function(e,n,t){n.Z=t.p+"assets/images/engineconn-01-ae1b256647d437b3e9f9323b0c762e17.png"}}]);